{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhis\\\\Desktop\\\\markdown-notes\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [notes, setNotes] = React.useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\");\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    // Put the most recently-modified note at the top\n    setNotes(oldNotes => {\n      const newArray = [];\n\n      for (let i = 0; i < oldNotes.length; i++) {\n        const oldNote = oldNotes[i];\n\n        if (oldNote.id === currentNoteId) {\n          newArray.unshift({ ...oldNote,\n            body: text\n          });\n        } else {\n          newArray.push(oldNote);\n        }\n      }\n\n      return newArray;\n    });\n  }\n\n  function deleteNote(event, noteId) {\n    event.stopPropagation();\n    setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId));\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        currentNote: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote,\n        deleteNote: deleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"h9rVnagE36yNkFkROwCMD8XJBck=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/abhis/Desktop/markdown-notes/src/App.js"],"names":["React","Sidebar","Editor","Split","nanoid","App","notes","setNotes","useState","JSON","parse","localStorage","getItem","currentNoteId","setCurrentNoteId","id","useEffect","setItem","stringify","createNewNote","newNote","body","prevNotes","updateNote","text","oldNotes","newArray","i","length","oldNote","unshift","push","deleteNote","event","noteId","stopPropagation","filter","note","findCurrentNote","find"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport Sidebar from \"./components/Sidebar\"\r\nimport Editor from \"./components/Editor\"\r\nimport Split from \"react-split\"\r\nimport { nanoid } from \"nanoid\"\r\n\r\nexport default function App() {\r\n    const [notes, setNotes] = React.useState(\r\n        () => JSON.parse(localStorage.getItem(\"notes\")) || []\r\n    )\r\n    const [currentNoteId, setCurrentNoteId] = React.useState(\r\n        (notes[0] && notes[0].id) || \"\"\r\n    )\r\n\r\n    React.useEffect(() => {\r\n        localStorage.setItem(\"notes\", JSON.stringify(notes))\r\n    }, [notes])\r\n\r\n    function createNewNote() {\r\n        const newNote = {\r\n            id: nanoid(),\r\n            body: \"# Type your markdown note's title here\"\r\n        }\r\n        setNotes(prevNotes => [newNote, ...prevNotes])\r\n        setCurrentNoteId(newNote.id)\r\n    }\r\n\r\n    function updateNote(text) {\r\n        // Put the most recently-modified note at the top\r\n        setNotes(oldNotes => {\r\n            const newArray = []\r\n            for (let i = 0; i < oldNotes.length; i++) {\r\n                const oldNote = oldNotes[i]\r\n                if (oldNote.id === currentNoteId) {\r\n                    newArray.unshift({ ...oldNote, body: text })\r\n                } else {\r\n                    newArray.push(oldNote)\r\n                }\r\n            }\r\n            return newArray\r\n        })\r\n    }\r\n\r\n    function deleteNote(event, noteId) {\r\n        event.stopPropagation()\r\n        setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId))\r\n    }\r\n\r\n    function findCurrentNote() {\r\n        return notes.find(note => {\r\n            return note.id === currentNoteId\r\n        }) || notes[0]\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            {\r\n                notes.length > 0\r\n                    ?\r\n                    <Split\r\n                        sizes={[30, 70]}\r\n                        direction=\"horizontal\"\r\n                        className=\"split\"\r\n                    >\r\n                        <Sidebar\r\n                            notes={notes}\r\n                            currentNote={findCurrentNote()}\r\n                            setCurrentNoteId={setCurrentNoteId}\r\n                            newNote={createNewNote}\r\n                            deleteNote={deleteNote}\r\n                        />\r\n                        {\r\n                            currentNoteId &&\r\n                            notes.length > 0 &&\r\n                            <Editor\r\n                                currentNote={findCurrentNote()}\r\n                                updateNote={updateNote}\r\n                            />\r\n                        }\r\n                    </Split>\r\n                    :\r\n                    <div className=\"no-notes\">\r\n                        <h1>You have no notes</h1>\r\n                        <button\r\n                            className=\"first-note\"\r\n                            onClick={createNewNote}\r\n                        >\r\n                            Create one now\r\n                        </button>\r\n                    </div>\r\n\r\n            }\r\n        </main>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}